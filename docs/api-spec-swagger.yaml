openapi: 3.0.3
info:
  title: Develeb API- OpenAPI 3.0
  description: |-
    This is a blueprint for Develeb's website API that contains all the endpoints for operations related to management of users, events, resources, jobs and companies. 
  termsOfService: http://swagger.io/terms/
  
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

tags:
 
  - name: session
    description : Session Management
  - name: user
    description: User Management
  - name: resource
    description: Resource Management
  - name: job
    description: Job posts Management
  - name: events
    description: Event Management 
  # - name: Company
  #   description: Companies Management
  # - name: Feedback
  #   description: Feedback Management 
  
paths:

  /session:
    post:
      tags:
       -  session
      summary: Create Session
      description: Creates a session and returns it to the user.
      operationId: CreateSession
      responses:
        '200':
            description: success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        sessionId:
                          type: string
                          example: "f21e77c9-8fd6-4d58-ae91-2560b53c2389"
                    
      
  /users/login:
    post:
      tags:
        - user
      summary: Login
      description: Logs the user in and generates the session token or JWT token
      operationId: Login
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                        token:
                          type: string
                          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        refreshToken:
                          type: string
                          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyX2lkIiwiaWF0IjoxNjI2MjYyMzI0LCJleHAiOjE2MjYyNzAyNzN9.rANDOM_HashEd_SignAtuRE"
                        userId:
                          type: string
                          example: "f21e77c9-8fd6-4d58-ae91-2560b53c2389"
                        role:
                          type: string
                          example: user
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"
        
  /users/logout:
    post:
      tags:
        - user
      summary: Logout
      description: Logs out the user by invalidating the session or JWT token. Must be logged in first.
      operationId: logoutUser
      security:
       - jwt: []
      requestBody:
        description: Logout request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully logged out."
        '400':
          description: Bad Request - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token."
        '401':
          description: Unauthorized - Token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authorization token is required."
                    
                    
                    
  /users/reset-password:
    post:
      tags:
        - user
      summary: Reset Password
      description: Resets the user's password based on provided credentials or email verification
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                 type: string
                 format: email
                 example: "user@example.com"
                newPassword:
                 type: string
                 example: "newPassword123"
      responses:
        '200':
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful."
        
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email format."
        '401':
          description: Unauthorized - User not authorized to reset password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized to reset password."
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
                          
  
  /users/verify:
    post:
      tags:
        - user
      summary: Send verification link
      description: Sends a verification link to the user's email to verify their account.
      operationId: sendVerificationLink
      requestBody:
        description: Email address to send the verification link to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email sent successfully."
        '400':
          description: Bad Request - Invalid email format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email format."
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
  
  /users:
    post:
      tags:
        - user
      summary: Creates new user 
      description: Creates a user from the data sent from the registration form
      operationId: Register
      requestBody:
        description: Register Form Data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                first_name:
                  type: string
                  example: "Danny"
                last_name :
                  type: string
                  example : "Doe"
                phone_number:
                  type : number
                  example: 71253647
                level_id:
                  type: integer
                  format: int64
                category_id:
                  type: integer
                  format: int64
                  
                  
                    
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered."
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email format."
        '409':
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User with this email already exists."
                    
    get:
      tags: 
        - user
      summary: Get a list of users 
      description: Gets a list of all users
      operationId: GetUsers
      security:
        - jwt: []
      parameters:
        - name: pageIndex
          in: query
          description: The index of the page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: pageSize
          in: query
          description: The number of users per page
          required: false
          schema:
            type: integer
            example: 10  
        - name: username
          in: query
          description: Filter users by username (exact match)
          required: false
          schema:
            type: string
            example: "john_doe"
        - name: email
          in: query
          description: Filter users by email (exact match)
          required: false
          schema:
            type: string
            format: email
            example: "john.doe@example.com"    
      responses:
        '200':
          description: Successfully retrieved the list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pageIndex:
                    type: integer
                    example: 1
                  pageSize:
                    type: integer
                    example: 10
                  totalRecords:
                    type: integer
                    example: 100
                    
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to access this resource."
        '404':
          description: Not Found - User does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
                  
  /users/{userId}:
    get:
      tags:
        - user
      summary: View User Profile
      description: Retrieves the profile information of the authenticated user.
      operationId: getUserProfile
      parameters:
       - name: userId
         in: path
         required : true
         schema:
           type: string
           format: uuid
           example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
       
      security:
        - jwt: []
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
               type: object
               properties:
                data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."
        '404':
          description: Not Found - User profile not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User profile not found."
        
    # patch:
    #   tags:
    #     - user
    #   summary: Update one or some user attributes
    #   description: This can only be done by the logged in user.
    #   operationId: updateUser
    #   parameters:
    #     - name: userId
    #       in: path
    #       description: id of user to be edited
    #       required: true
    #       schema:
    #         type: integer
    #   security:
    #     - jwt: []      
    #   requestBody:
    #     description: here we send only the attribute(s) we want to update 
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/User'
         
    #       application/xml:
    #         schema:
    #           $ref: '#/components/schemas/User'
    #       application/x-www-form-urlencoded:
    #         schema:
    #           $ref: '#/components/schemas/User'
    #   responses:
    #     '200':
    #       description: Successfully updated the user
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "User successfully updated."
    #     '400':
    #       description: Bad Request - Invalid input data
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "Invalid user data."
    #     '401':
    #       description: Unauthorized - User is not authenticated
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "Authentication required."
    #     '403':
    #       description: Forbidden - User does not have the necessary permissions
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "You do not have permission to update this user."
    #     '404':
    #       description: Not Found - User not found
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "User not found."
                    
    put:
      tags:
        - user
      summary: Update the user attributes
      description: Must be logged in to access this feature. Updates all the user attributes.
      parameters:
        - name: userId
          in: path
          description: id of user to be edited
          required: true
          schema:
            type: string
            format: uuid
            
      security: 
        - jwt: []
      requestBody:
        description: here we send the entire schema of the user to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
         
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully updated."
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user data."
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to update this user."
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."                
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      security:
        - jwt: []
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user data."
          
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to delete this user."
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
          
  /users/{userId}/events:
    get:
      tags:
        - user
      summary: Get events attended by user
      description: Retrieve all events attended by a user
      operationId: getUserEvents
      security:
        - jwt: [] 
      parameters:
        - name: userId
          in: path
          description: ID of the user to get events for
          required: true
          schema:
             type: string
             format: uuid
             example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."            
                    
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found." 
              
  /resources:
    get:
      tags: 
        - resource
      summary: Get list of resources
      
      parameters:
        - name: pageIndex
          in: query
          description: The index of the page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: pageSize
          in: query
          description: The number of users per page
          required: false
          schema:
            type: integer
            example: 10        
        - name: type
          in: query
          schema:
            type: string
          description: Filter by resource type
        - name: title
          in: query
          schema:
            type: string
          description: Filter by resource title
        - name: tags
          in: query
          schema:
            type: string
            example: community resource,news
          description: Filter by resource tags (comma separated)
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
               type: object
               properties:
                data:  
                 type: array
                 items:
                   $ref: '#/components/schemas/Resource'
        
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource not found."           
    post:
      tags:
        - resource
      summary: Create new resource
      security:
        - jwt: []
      requestBody:
        description: Create new resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource created successfully.   
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input.
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."            
                    
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to access this resource."            
  /resources/{id}:
    get:
      tags:
        - resource
      summary: Get resource by id
      parameters:
        - name: id
          in: path
          description: ID of resource to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
       '200':
         description: success
         content:
            application/json:
              schema:
                type: object
                properties: 
                  data :
                    $ref: '#/components/schemas/Resource'
       '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource not found."  
    put:
      tags:
      - resource
      summary: Update a resource
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          description: ID of resource to edit
          required: true
          schema:
            type: string
            format: uuid
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      requestBody:
        description: updated resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
               type: object
               properties:
                  message:
                   type: string
                   example: Resource updated successfully
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."            
                    
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to access this resource."           
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: string
                properties:
                  message:
                   type: string
                   example: Resource not found.
    delete:
      tags:
      - resource
      summary: Delete a resource
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          description: ID of resource to delete
          required: true
          schema:
            type: string
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '204':
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource deleted."
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication required."            
                    
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to access this resource."           
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: string
                properties:
                  message:
                   type: string
                   example: Resource not found.
    
  /resources/{id}/views:
    get:
      tags:
        - resource
      summary: Get view count for a resource
      parameters:
        - name: id
          in: path
          description: ID of resource
          required: true
          schema:
            type: string
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                         resource_id:
                           type: string
                           example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
                         view_count:
                           type: integer
                           example: 1000
        '404':
          description: resource not found
          content:
           application/json:
              schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Resource not found.
                      
  /resources/{resourceId}/save/{userId}:
    post:
        tags:
          - resource
        summary: Save an event for the user
        description: Allows a user to save an event to their favorites
        security:
        - jwt: []

        operationId: saveResource
        parameters:
          - name: resourceId
            in: path
            required: true
            description: The ID of the event to be saved
            schema:
              type: string
          - name: userId
            in: path
            required : true
            schema:
             type: string
             format: uuid
             example: f21e77c9-8fd6-4d58-ae91-2560b53c2389    
        
        responses:
          '200':
            description: Event saved as favorite
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Event saved as favorite
          '400':
            description: Invalid input 
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Invalid input
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
                    
          '404':
            description: Event not found or User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Resource not found or User not found            

  /events:
    get:
      tags:
        - events
      summary: Get events
      description: Retrieves a list of events filtered by type, tags, or title
      operationId: getEvents
      parameters:
        - name: type
          in: query
          description: Type of the event
          required: false
          schema:
            type: string
        - name: tags
          in: query
          description: Tags associated with the event
          required: false
          schema:
            type: array
            items:
              type: string
        - name: title
          in: query
          description: Title of the event
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - events
      summary: Create a new event
      description: Create a new event and generate a WhatsApp post for scheduled posting
      operationId: createEvent
      requestBody:
        description: Event object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      security:
        - jwt: []

  /events/{eventId}:
    get:
      tags:
        - events
      summary: Get event by ID
      description: Retrieve a single event by its ID
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of the event to retrieve
          required: true
          schema:
            type: string
            format: uuid
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    put:
      tags:
        - events
      summary: Update an event
      description: Update an existing event
      operationId: updateEvent
      parameters:
        - name: eventId
          in: path
          description: ID of the event to update
          required: true
          schema:
            type: string
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      requestBody:
        description: Updated event object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
      security:
        - jwt: []
    # patch:
    #   tags:
    #     - events
    #   summary: Partially update an event
    #   description: Update one or more fields of an existing event
    #   operationId: patchEvent
    #   parameters:
    #     - name: eventId
    #       in: path
    #       description: ID of the event to update
    #       required: true
    #       schema:
    #         type: string
    #         format: uuid
    #         example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
    #   requestBody:
    #     description: Fields of the event to update
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Event'
    #   responses:
    #     '200':
    #       description: Event updated successfully
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Event'
    #     '404':
    #       description: Event not found
    #   security:
    #     - jwt: []
    delete:
      tags:
        - events
      summary: Delete an event
      description: Mark an event as deleted
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          description: ID of the event to delete
          required: true
          schema:
            type: string
            format: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '200':
          description: Event marked as deleted
        '404':
          description: Event not found
      security:
        - jwt: []

  # /favorites:
  #   post:
  #     tags:
  #       - Favorites
  #     summary: Save and favorite an event
  #     description: Save and favorite an event for the registered user
  #     operationId: saveFavoriteEvent
  #     security:
  #       - jwt: []
  #     requestBody:
  #       description: entity ID to save as favorite
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               entityId:
  #                 type: string
  #                 format: uuid
  #                 example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
  #               userId:
  #                 type: string
  #                 format: uuid
  #                 example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
  #               entityType:
  #                 type: string
  #                 example: Resource
                  
  #     responses:
  #       '200':
  #         description: Event saved as favorite
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: Event saved as favorite
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: Invalid input or Invalid type
  #       '401':
  #           description: Unauthorized
  #           content:
  #             application/json:
  #               schema:
  #                 type: object
  #                 properties:
  #                 message:
  #                     type: string
  #                     example: "Unauthorized - Invalid credentials"            
                  
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: Event not found or User not found

  /events/{eventId}/register/{userId}:
    post:
      tags:
        - events
      summary: Register for an event
      parameters:
       - name : eventId
         in: path
         description: ID of the event to register
         required: true
         schema:
            type: string
            format: uuid
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
       - name : userId
         in: path
         description: ID of the user that's registering
         required: true
         schema:
            type: string
            format: uuid
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      description: Register a user for an upcoming event
      operationId: registerEvent
      
      responses:
        '200':
          description: Registered for event successfully
           
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successful registration"
      security:
        - jwt: []

  /events/{eventId}/registrations:
    get:
      tags:
        - events
      summary: Get registrations for an event
      description: Retrieve all registrations for a given event
      operationId: getEventRegistrations
      parameters:
        - name: eventId
          in: path
          description: ID of the event to get registrations for
          required: true
          schema:
            type: string
            format: uuid
            example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
      responses:
        '200':
          description: List of registrations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      format: uuid
                      example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
                    username:
                      type: string
      security:
        - jwt: []

  /events/{eventId}/save/{userId}:
    post:
        tags:
          - events
        summary: Save an event for the user
        description: Allows a user to save an event to their favorites
        security:
        - jwt: []

        operationId: saveEvent
        parameters:
          - name: eventId
            in: path
            required: true
            description: The ID of the event to be saved
            schema:
              type: string
          - name: userId
            in: path
            required: true
            schema:
              type: string
        
        responses:
          '200':
            description: Event saved as favorite
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Event saved as favorite
          '400':
            description: Invalid input 
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Invalid input 
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
                    
          '404':
            description: Event not found or User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Event not found or User not found
                    
    
     
      
      
  # /analytics/events:
  #   get:
  #     tags:
  #       - events
  #     summary: Get event analytics
  #     description: Retrieve analytics data for events
  #     operationId: getEventAnalytics
  #     responses:
  #       '200':
  #         description: Analytics data
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalRegistrations:
  #                   type: integer
  #                 totalViews:
  #                   type: integer
  #                 popularEvents:
  #                   type: array
  #                   items:
  #                     type: object
  #                     properties:
  #                       eventId:
  #                         type: string
  #                         format: uuid
  #                         example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
  #                       title:
  #                         type: string
  #                       views:
  #                         type: integer
  #     security:
  #       - jwt: []
    
    
  # /company:
  #   get:
  #     tags:
  #       - Company
  #     summary: Get all companies
  #     description: Get all companies
  #     operationId: getCompanies
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Company'
  #   post:
  #     tags:
  #       - Company
  #     summary: Create a new company
  #     description: Create a new company. Requires ADMIN authority.
  #     security:
  #     - jwt: []
  #     operationId: addCompany
  #     requestBody:
  #       description: Create a new company
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Company'
  #       required: true
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Company'
  #       '400':
  #         description: Invalid input
  #       '422':
  #         description: Validation exception
  #   put:
  #     tags:
  #       - Company
  #     summary: Update an existing company
  #     security:
  #     - jwt: []
  #     description: Update an existing company by id
  #     operationId: updateCompany
  #     requestBody:
  #       description: Update an existing company by id
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Company'
  #       required: true
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Company'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Job not found
  #       '422':
  #         description: Validation exception
  # /company/{companyId}:
  #   get:
  #     tags:
  #       - Company
  #     summary: Get company by id
  #     description: Get company by id
  #     operationId: getCompany
  #     parameters:
  #       - name: companyId
  #         in: path
  #         description: ID of company to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Company'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Company not found
  #   delete:
  #     tags:
  #       - Company
  #     summary: Delete company by id
  #     description: Delete company by id
  #     security:
  #     - jwt: []
  #     operationId: deleteCompany
  #     parameters:
  #       - name: companyId
  #         in: path
  #         description: ID of company to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: Successful operation
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Company not found
  # /company/{companyId}/feedback:
  #   post:
  #     tags:
  #       - Company
  #     summary: Create a new feedback for a company
  #     security:
  #     - jwt: []
  #     description: Create a new feedback for a company
  #     operationId: addFeedback
  #     parameters:
  #       - name: companyId
  #         in: path
  #         description: ID of company to add feedback
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       description: Create a new feedback for a company
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/CompanyFeedback'
  #       required: true
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CompanyFeedback'
  #       '400':
  #         description: Invalid input
  #       '422':
  #         description: Validation exception
  # /company/feedback/{feedbackId}:
  #   get:
  #     tags:
  #       - Feedback
  #     summary: Get feedback by id
  #     description: Get feedback by id
  #     operationId: getFeedback
  #     parameters:
  #       - name: feedbackId
  #         in: path
  #         description: ID of feedback to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CompanyFeedback'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Feedback not found
  #   delete:
  #     tags:
  #       - Feedback
  #     summary: Delete feedback by id
  #     security:
  #     - jwt: []
  #     description: Delete feedback by id
  #     operationId: deleteFeedback
  #     parameters:
  #       - name: feedbackId
  #         in: path
  #         description: ID of feedback to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: Successful operation
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Feedback not found
  /jobs/{jobId}:
    get:
      tags:
        - job
      summary: Get job by Id
      description: Returns a job of the given Id
      
      operationId: getJobById
      parameters:
        - name: jobId
          in: path
          description: Id of job to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Job'          
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid ID supplied
        
             
                    
                  
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job not found
                  
    delete:
      tags:
        - job
      summary: delete a particular job by id
      description: Only deletes on the platform, not communication channels
      operationId: deleteJob
      security:
        - jwt: []
      parameters:
        - name: jobId
          in: path
          description: Id of job to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Job deleted successfully
           
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job deleted."
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid ID supplied
        
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"   
        '403':
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to access this resource."              
                    
                  
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job not found
    put:
      tags:
        - job
      summary: update an existing job
      description: update an existing job by Id
      operationId: updateJob
      security:
        - jwt: []
      parameters:
        - name: jobId
          in: path
          description: Id of job to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existing job in the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job update successful"
        '400':
          description: Invalid ID supplied or Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid ID supplied or Bad request
                 
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized - Invalid token
               
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission
                 
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job not found
                 
        
    # patch:
    #   tags:
    #     - job
    #   summary: update an existing job
    #   description: Update an existing job by Id
    #   security:
    #     - jwt: []
    #   parameters:
    #     - name: jobId
    #       in: path
    #       description: Id of job to update
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #   requestBody:
    #     description: Update an existing job in the system
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Job'
    #   responses:
    #     '200':
    #       description: Successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Job'          
    #     '400':
    #       description: Invalid Id supplied
    #     '404':
    #       description: Job not found
    #     '422':
    #       description: Validation exception
  /jobs:
    get:
      tags:
        - job
      summary: Get jobs with with optional filters
      description: Returns a list of jobs based on filters
     
         
      operationId: getJobs
      parameters:
        - name: pageIndex
          in: query
          description: The index of the page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: pageSize
          in: query
          description: The number of users per page
          required: false
          schema:
            type: integer
            example: 10
        - name: categoryId
          in: query
          description: Filter by category Id
          schema:
            type: integer
            format: int64
        - name: levelId
          in: query
          description: Filter by level Id
          schema:
            type: integer
            format: int64
        - name: companyName
          in: query
          description: Filter by company name
          schema:
            type: string
        - name: popular
          in: query
          description: Filter by popular jobs
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job not found 

    post:
      tags:
        - job
      summary: Submit a job for admin approval
      description: Allows users to submit a job listing for admin approval. 
      operationId: submitJobForApproval
      security:
        - jwt: []
      requestBody:
        description: Job details to be submitted for approval
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Frontend Developer
                level_id:
                  type: string
                  example: 147cfbf5-ab6f-4530-9293-213a881a31fd
                category_id :
                  type: string
                  example: 147cfbf5-ab6f-4530-9293-213a881a31fd
                type_id:
                  type: string
                  example: 147cfbf5-ab6f-4530-9293-213a881a31fd
                location:
                  type: string
                  example: Beirut
                description:
                  type: string
                  example: Frontend position 
                compensation:
                  type: string
                  example: 1200$-1500$
                application_link:
                  type: string
                  example: https://www.google.com
                is_external:
                  type: boolean
                  example: true
                tags:
                  type: string
                  example: '#frontend,#react'
                
      responses:
        '202':
          description: Job submitted for approval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job submitted for approval
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input
                  
        
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized - Invalid token
                  
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission
                  
  
  /jobs/{jobId}/approve:
    post:
      tags:
        - job
      summary: Approve a new job submission. 
      description: Must have ADMIN authority.
      operationId: approveJob
      security:
        - jwt: []
      parameters:
        - name: jobId
          in: path
          description: Id of job to approve
          required: true
          schema:
            type: string
            format: uuid
        # - name: publish
        #   in: path
        #   description: "If the job is to be published on whatsapp. It is true by default"
        #   required: true
        #   schema:
        #     type: boolean
        #     example: true
          
      responses:
        '200':
          description: Job approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job approved successfully
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized - Invalid token
                  
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission
                  
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job not found
  /jobs/{jobId}/reject:
    post:
      tags:
        - job
      summary: Reject a new job submission. 
      description: Must have ADMIN authority.
      operationId: rejectJob
      security:
        - jwt: []
      parameters:
        - name: jobId
          in: path
          description: Id of job to reject
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job approved successfully
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized - Invalid token
                  
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission
                
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job not found
  /jobs/{jobId}/save/{userId}:
    post:
        tags:
          - job
        summary: Save an event for the user
        description: Allows a user to save an event to their favorites
        security:
        - jwt: []

        operationId: saveJob
        parameters:
          - name: jobId
            in: path
            required: true
            description: The ID of the job to be saved
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: The ID of the user saving the job
                    example: " f21e77c9-8fd6-4d58-ae91-2560b53c2389"
        responses:
          '200':
            description: Job saved as favorite
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Job saved as favorite
          '400':
            description: Invalid input
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Invalid input
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
                    
          '404':
            description: Event not found or User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Job not found or User not found
  
  /jobs/category:
    
    get:
      tags:
        - job
      summary: Get a list of all job categories
      # parameters:
      #   - name: categories
      #     description: categories to search for
      #     in: query
      #     required: false
      #     schema:
      #       type: array
      #       items:
      #         type: string
      #         example: ['backend','frontend']
          
      responses:
        '200':
          description: List of jobs retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobCategory'
        '404':
          description: Job category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job category not found              
                    
    post:
      tags:
        - job
      summary: Create a new job category
      security:
      - jwt: []
      description: Must have ADMIN authority.
      operationId: createJobCategory
      requestBody:
        description: New job category details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Backend"
      responses:
        '200':
          description: Job category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job category created successfully
        '400':
           description: Bad Request
           content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Invalid input
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized - Invalid token
                  
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission
                 
       
  /jobs/category/{categoryId}:
    get:
      tags:
        - job
      summary: Get a job category by Id
      description: Must have ADMIN authority.
      operationId: getJobCategory
      security: 
       - jwt: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Job category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCategory'
        '404':
          description: Job category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job category not found
    put:
      tags:
        - job
      summary: Update a job category by Id
      description: Must have ADMIN authority.
      security:
       - jwt : []
      operationId: updateJobCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            
            type: integer
            format: int64
      requestBody:
        description: Updated job category details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated category title"
      responses:
        '200':
          description: Job category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job category updated successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission 
        '404':
          description: Job category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job category not found
                    
    delete:
      tags:
        - job
      summary: Delete a job category by Id
      description: Must have ADMIN authority.
      security:
       - jwt : []
      operationId: deleteJobCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
             type: integer
            format: int64
      responses:
        '204':
          description: Job category deleted successfully
          content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Category deleted successfully" 
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission               
        '404':
          description: Job category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job category not found
  /jobs/level:
    post:
      tags:
        - job
      summary: Create a new job level
      operationId: createJobLevel
      description: Must have ADMIN authority.
      security:
       - jwt : []
      requestBody:
        description: New job level details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobLevel'
      responses:
        '201':
          description: Job level created
          content:
                application/json:
                  schema:
                    type: object
                    properties:
                     message:
                        type: string
                        example: "Job level created" 
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission 
  /jobs/level/{levelId}:
    get:
      tags:
        - job
      summary: Get a job level by Id
      description: Must have ADMIN authority.
      security:
       - jwt : []
      operationId: getJobLevel
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
             type: integer
            format: int64
      responses:
        '200':
          description: Job level details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobLevel'
        '404':
          description: Job level not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job level not found
    put:
      tags:
        - job
      summary: Update a job level by Id
      description: Must have ADMIN authority.
      security:
       - jwt : []
      operationId: updateJobLevel
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
             type: integer
            format: int64
      requestBody:
        description: Updated job level details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobLevel'
      responses:
        '200':
          description: Job level updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job level updated.
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission             
        '404':
          description: Job level not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job level not found
        
       
    delete:
      tags:
        - job
      summary: Delete a job level by Id
      description: Must have ADMIN authority.
      security:
       - jwt : []
      operationId: deleteJobLevel
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
             type: integer
            format: int64
      responses:
        '204':
          description: Job level deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job level deleted successfully.
          
        '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   message:
                      type: string
                      example: "Unauthorized - Invalid credentials"            
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden - User does not have permission 
        '404':
          description: Job level not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job level not found
  # /jobs/{jobId}/analytics:
  #   get:
  #     tags:
  #       - job
  #     summary: Get job analytics by Id
  #     description: Returns detailed analytics data for a specific job.Must have ADMIN authority.
  #     security: 
  #     - jwt: []
  #     operationId: getJobAnalytics
  #     parameters:
  #       - name: jobId
  #         in: path
  #         description: Id of the job to get analytics for
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: startDate
  #         in: query
  #         description: Start date for analytics (format YYYY-MM-DD)
  #         schema:
  #           type: string
  #           format: date
  #       - name: endDate
  #         in: query
  #         description: End date for analytics (format YYYY-MM-DD)
  #         schema:
  #           type: string
  #           format: date
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/JobViews'
  #       '400':
  #         description: Invalid Id supplied
  #       '404':
  #         description: Job not found      
components:
  schemas:
    Job:
      type: object
      required:
        - title
        - level_id
        - category_id
      properties:
        job_id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        title:
          type: string
          example: Software Engineer
        level_id:
          type: integer
          format: int64
        category_id:
          type: integer
          format: int64
        location:
          type: string
          example: San Francisco, CA
        description:
          type: string
          example: We are looking for a skilled software engineer...
        compensation:
          type: string
          example: $120,000 - $150,000 per year
        application_link:
          type: string
          example: https://apply.jobboard.com/job/10
        is_external:
          type: boolean
          example: false
        company_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tags:
          type: string
          format: text
    JobCategory:
      type: object
      properties:
        id:
         type: integer
         format: int64
        title:
          type: string
          example: Technology
    JobLevel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Mid-level
    JobViews:
      type: object
      properties:
        id:
          type: integer
          format: int64
        job_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        session_id:
          type: integer
          format: int64
        last_viewed_at:
          type: string
          format: date-time
    JobSaved:
      type: object
      properties:
        id:
          type: integer
          format: int64
        job_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        saved_at:
          type: string
          format: date-time
          description: The timestamp when the job was saved
      required:
        - job_id
    JobType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        title:
          type: string
        description:
          type: string
        video_link:
          type: string
          format: uri
        flyer_link:
          type: string
          format: uri
        date:
          type: string
          format: date-time
        location:
          type: string
        speaker_name:
          type: string
        speaker_description:
          type: string
        speaker_profile_url:
          type: string
          format: uri
        type_id:
          type: integer
          format: int64
        tags:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - title
        - video_link
        - flyer_link
    UserEventRegistration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        user_id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        event_id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        user_type:
          type: string
    EventSaved:
      type: object
      properties:
        id:
          type: integer
          format: int64
        event_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        saved_at:
          type: string
          format: date-time
      required:
        - event_id
    
    
        
    Resource:
      type: object
      required:
      - id
      - title
      - link
      properties:
        id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        title:
          type: string
          example: "Resource Title"
        tags:
          type: array
          items:
            type: string
          format: int32
          example: ["tag 1, tag 2"]
        description:
          type: string
          example: "description of a resource"
        link:
          type: string
          example: "https://www.resource.com"
        publish:
          type: boolean
          example: true
        type:
          type: string
          example: "community resource"
        created_at:
          type: string
          format: date
          example: "01-01-2024"
        updated_at:
          type: string
          format: date
          example: "01-01-2024"
    ResourceViews:
      type: object
      required:
       - id
       - user_id
       - resource_id
       - viewed_at
      properties:
        id:
          type: integer
          format: int64
        user_id:
         type: integer
          format: int64
        resource_id:
          type: integer
          format: int64
        session_id:
          type: integer
          format: int64
        last_viewed_at:
          type: string
          format: date-time 
    ResourceSaved:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resource_id:
             type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        saved_at:
          type: string
          format: date-time
          description: The timestamp when the resource was saved
      required:
        - resource_id      
    User:
      type: object
      properties:
        id: 
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        full_name:
          type: string
          example: John James
        email:
          type: string
          example: john@email.com
        phone_number:
          type: string
          example: '76345678'
        role:
          type: string
          description: indicates the role/priviledges of the user
          example: user
        level_id:
          type: integer
          format: int64
        category_id: 
          type: integer
          format: int64
        is_verified:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time 
        profile_url:
          type: string
          description: this is a URL reference to a picture stored in a repository
        tags:
          type: string
          format: text
          
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        name:
          type: string
          example: Google
        description:
          type: string
          example: Google is a multinational technology company...
        website:
          type: string
          example: https://www.google.com
        size:
          type: string
          example: 10000+
        location:
          type: string
          example: Mountain View, CA
        industry:
          type: string
          example: Technology
        is_visible:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time 
        intagram_url:
          type: string
          example: https://www.instagram.com/google 
        facebook_url:
          type: string
          example: https://www.facebook.com/google 
        x_url: 
          type: string
          example: https://www.twitter.com/google 
        linkedin_url: 
          type: string
          example: https://www.linkedin.com/google 
        
    CompanyFeedback:
      type: object
      properties:
        id:
          type: integer
          format: int64
        company_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        description:
          type: string
          example: Great company to work for!
        approved:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time 
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: f21e77c9-8fd6-4d58-ae91-2560b53c2389
        created_at:
          type: string
          format: date-time
    Tags:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      name: api_key
      in: header
