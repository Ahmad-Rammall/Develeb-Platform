openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
 
  - name: user
    description: Operations about user
paths:
  /user/login:
    post:
      tags:
        - user
      summary: Login
      description: Logs the user in and generates the session token or JWT token
      operationId: Login
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Internal server error
                
  /user/register:
    post:
      tags:
        - user
      summary: Registers new user account
      description: Creates list of users with given input array
      operationId: Register
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                firstname:
                  type: string
                  example: "Danny"
                lastname :
                  type: string
                  example : "Doe"
                phonenb:
                  type : number
                  example: 71253647
                experience_level:
                  type: string
                  example: "Senior"
                education:
                  type: string
                  example: Computer Science
                  
                    
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered."
                  userId:
                    type: integer
                    example: 123
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email format."
        '409':
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with this email already exists."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An error occurred while processing your request."
  /user/logout:
    post:
      tags:
        - user
      summary: Logout
      description: Logs out the user by invalidating the session or JWT token.
      operationId: logoutUser
      requestBody:
        description: Logout request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully logged out."
        '400':
          description: Bad Request - Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid token."
        '401':
          description: Unauthorized - Token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Authorization token is required."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An error occurred while processing your request."
  /user/{userid}:
    get:
      tags:
        - user
      summary: View User Profile
      description: Retrieves the profile information of the authenticated user.
      operationId: getUserProfile
      parameters:
       - name: userid
         in: path
         required : true
         schema:
          type: string
       
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Authentication required."
        '404':
          description: Not Found - User profile not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User profile not found."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An error occurred while processing your request."
    patch:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userid
          in: path
          description: id of user to be edited
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []      
      requestBody:
        description: here we send only the attribute we want to update 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
         
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        userid:
          type: string
          example: 12345fghd
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phonenb:
          type: string
          example: '76345678'
        admin:
          type: boolean
          description: indicates if user has admin priviledges
          example: false
        experience_level:
          type: string
          example: Junior
        education:
          type: string
          example: 'Computer Engineering'
        job_role:
          type: string
          example: 'Backend Developer'
        description:
          type: string
          example: I am a backend developer looking for opportunities
          
        joindate:
          type: object
          description: This is a timestamp in unix,can be converted to current date
          example: '1718896779'
        profile_picture:
          type: object
          description: this is a byte array (bytea)
      xml:
        name: user
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      name: api_key
      in: header